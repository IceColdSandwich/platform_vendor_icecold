#
# build_lord.ini
# Build LordClockaN's version of ICS
#

#
# This is an example .ini file that is used by build.sh. Its purpose is to define
# default values for various variables required by build.sh so that you don't have
# to specify all the options on a command line!
#
# The information in this file as well as other command line arguments are processed
# and verified by init.sh.
#
# Most of these can be overriden by a command line option to build.sh. See build.sh
# and init.sh for more details.
#

# The prefix 'AB_' for the variables stands for Android Build

#
# AB_VERBOSE choices are {0,1,2,3,4,5,6,7,8,9}.
#   0 = extra quite (may not be implemented yet)
#   1 = normal build messages (default)
#   2 = a little more build messages
#   3..9 = even more messages (may not be implemented yet)
AB_VERBOSE=1

#
# AB_CLEAN {0, no, "", 1, yes}
# No need to specify AB_CLEAN here unless you always want to do a clean instead
# of building anything! Normally the '-clean xxx' command line argument makes
# more sense.
#   "", 0, no = do a normal build
#   1, yes    = do a clean (make clobber) and then exit
# If a clean is going to be done then nothing will be built and most other arguments
# will be ignored.
#
AB_CLEAN=no

#
# AB_ROM_TYPE specifies the type of ROM (KANG) to build. This selects (among other
# things) the ROM specific build script. For example, if you specify 'cm7' then
# the script build_cm7.sh will be invoked.
# The various ROM build_scripts are expected to live in the build_scripts directory.
# Must not be "".
AB_ROM_TYPE=lord

#
# AB_SYNC {0, no, "", 1, yes}
# This specifies what, if any, syncing to do before building.
#   "", 0, no = no sync
#   1, yes    = do a 'repo sync' before the build.
AB_SYNC=yes

#
# AB_SYNC_CPUS number of CPUs to use when doing the SYNC since some repositories
# don't sync well if to many threads are used. The range is n = -(m-1)..m where
# m is the number of CPUs available on the system.
#   n < 0 = use m - n CPUs, the result 'm - n' must be > 0
#   0     = special value meaning use all available CPUs
#   n > 0 = use n CPUs, where n should be <= m, but we don't check!
# The final value (call it k) is used like this
#   repo sync -j k
AB_SYNC_CPUS=-1

#
# AB_PUSH_TO_PHONE choices are {0, no, "", 1, yes}
# Determines whether the final KANG is copied to your phone after it is built
#   "", 0, no = no, do not push the result to your phone.
#   1, yes    = 'adb push' the resulting KANG to your phone. Your phone must be
#               connected to your PC via USB and the 'adb' tool must be in your path.
AB_PUSH_TO_PHONE=yes

#
# AB_PHONE choices are {ace}
# This may be expanded in the future, but has only been tested with Ace so far.
# Must not be "".
AB_PHONE=ace

#
# AB_SOURCE_DIR is the full path name to where your ROM sources are located on
# your hard drive.
# Must not be "".
AB_SOURCE_DIR=${HOME}/android/ics

#
# AB_DROPBOX_DIR is the full path name to your dropbox directory (or a sub-directory
# inside of it). If this is not empty then at the end of the build process the
# result file(s) will be copied there. This saves a few steps if you are building
# something that you want to copy to your dropbox and then post a link to and it
# also lets the upload start right away even if you aren't monitoring the build.
# "" means do not copy anything to your dropbox.
AB_DROPBOX_DIR=

#
# AB_MAKE_TYPE choices are {full, rebuild}
# This specifies what type of build to do.
#  full    = do 'make clobber' and then 'source build/envsetup.sh ' and then a rebuild.
#  rebuild = just do a rebuild, which varies depending on the ROM, for example
#              - bacon = make bacon (e.g. for CM7)
#              - lunch = make lunch
#              - lord  = make lord  (e.g. for LorDClockaN's ICS)
#            This requires that a previous full ROM build was done since these
#            processes assume certain things are already pre-built.
AB_MAKE_TYPE=rebuild

#
# AB_PATCH_xxx variables each control 1 patch (or a set of related patches) found
# in patches/default_patches. The default is for any patch defined in that file
# to be applied, but you can override that here.
#
# If you want to add a new patch you should add a PATCH_xxx variable for it here,
# update the patches/default_patches file to define the patch and add the actual
# patch file. If you forget to add a variable here for a new patch then the patch
# will be run by default.
#
# Patches are normally only applied if you are also doing a sync. See
# AB_FORCE_PATCHING below for overriding this behavior.
# Here are examples, but they came from the cm7 .ini file
#   AB_PATCH_TORCH2=1
#   AB_PATCH_BACKLIGHT=1
#   AB_PATCH_CARRIER=1

#
# AB_FORCE_PATCHING choices are {0, no, "", 1, yes}
# The default is to ignore ALL patches if you are NOT doing a sync as part of your
# build. This is because patching code that has already been patched will cause an
# error. However, you can use the '-fpatch' command line argument to force the
# patches to be run. This will execute all patches whose PATCH_xxx variable is true.
# The main reason you might do this is because you did a manual sync and are now
# doing a build on unpatched source and don't want to sync again.
#   "", 0, no = do not force patching when not doing a sync.
#   1, yes    = force patching when not doing a sync.
AB_FORCE_PATCHING=no

#
# AB_RUN choices are {0, no, "", 1, yes}
# Determines whether we actually start the build or just display the build info.
# It's better for this to be 'no' so you can look at what is going to be done without
# doing it. Then if everything is OK do the same command line, but add '-run yes'.
#   "", 0, no = display build information but do not build anything.
#   1, yes    = display build information and then do the buiod.
AB_RUN=no

#
# AB_OFFICIAL choices are {0, no, "", 1, yes}
# Normally this is set to 'no' and only set to 'yes' when doing an "official" release.
# The difference is that official builds add '-RC' to the ROM name.
#   "", 0, no = normal build
#   1, yes    = release build.
AB_OFFICIAL=no
